---
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import Layout from "./Layout.astro";
import SectionContainer from "@/components/SectionContainer.astro";
import { Icon } from "astro-icon/components";
import { SITE } from "@config";
import Logo from "@/components/header/Logo.astro";

export interface Props {
    post: CollectionEntry<"post">;
}

const { post } = Astro.props;

const { title, description, pubDate, updatedDate, heroImage } = post.data;

const ogUrl = new URL(
    heroImage ? heroImage : `${encodeURIComponent(post.slug)}.png`,
    Astro.url.origin
).href;

const { Content } = await post.render();

// Extract table of contents from the content
const tocRegex = /## Table of contents\n([\s\S]*?)(?=##|$)/;
const tocMatch = post.body.match(tocRegex);
const tableOfContents = tocMatch ? tocMatch[1].trim() : null;

// Extract headings from the content
const headingsRegex = /^##\s+(.+)$/gm;
const headings = [...post.body.matchAll(headingsRegex)].map(match => match[1]);
---

<Layout
    title={`${title} - ${SITE.title}`}
    description={description}
    image={ogUrl}
>
    <div slot="left-column" class="sticky top-8">
        <a
            class="blog-back-button cursor-pointer text-neutral-500 flex items-center no-underline mb-8 hover:text-neutral-900 prose-sm"
            href="/"
        >
            <Logo class="h-12 w-12" />
        </a>
        {(tableOfContents || headings.length > 0) && (
                <div class="prose prose-sm">
                    <ul class="list-none space-y-2">
                        {tableOfContents 
                            ? tableOfContents.split('\n').map((item) => {
                                const link = item.trim().replace(/^-\s*/, '');
                                const anchor = link.toLowerCase().replace(/\s+/g, '-');
                                return (
                                    <li>
                                        <a href={`#${anchor}`} class="text-neutral-500 hover:text-neutral-900">
                                            {link}
                                        </a>
                                    </li>
                                );
                            })
                            : headings.map((heading) => {
                                const anchor = heading.toLowerCase().replace(/\s+/g, '-');
                                return (
                                    <li>
                                        <a href={`#${anchor}`} class="text-neutral-500 hover:text-neutral-900">
                                            {heading}
                                        </a>
                                    </li>
                                );
                            })}
                    </ul>
                </div>
        )}
    </div>

    <div class="main-wrapper wrap-lg grid ">
        <h2 class="font-medium text-h4 text-zinc-800 m-4 leading-8 tracking-tighter">
            {title}
        </h2>

        {heroImage && (
            <div class="col-span-full relative mx-4 border-[1px] border-neutral-200 rounded-xl">
                <img
                    width={1920}
                    height={960}
                    src={heroImage}
                    alt={title}
                    class="rounded-xl w-full object-cover"
                />
            </div>
        )}

        <SectionContainer>
            <article
                class="prose prose-neutral prose-headings:font-medium prose-h2:text-3xl prose-h3:text-2xl prose-h4:text-xl prose-h5:text-lg prose-h6:text-base prose-h2:scroll-mt-4 prose-h3:scroll-mt-4 prose-h4:scroll-mt-4 prose-h5:scroll-mt-4 prose-h6:scroll-mt-4 prose-h2:my-8 prose-h3:my-8 prose-h4:my-8 prose-h5:my-8 prose-h6:my-8 prose-headings:font-title"
            >
                <div class="flex flex-col gap-1">
                    <span class="text-sm w-fit items-center rounded-full border border-neutral-300 bg-white px-1 py-[2px] font-medium text-zinc-600 block md:inline-flex mt-4">
                        <span class="px-2">
                            <FormattedDate date={pubDate} />
                            {updatedDate && <>- updated <FormattedDate date={updatedDate} /></>}
                        </span>
                    </span>
                </div>

                <div
                    class="prose-code:whitespace-pre-wrap prose-code:break-words prose-code:overflow-x-auto"
                >
                    <Content />
                </div>
            </article>
        </SectionContainer>
    </div>
</Layout>

<script>
    // Function to create a Back to history button.
    const buttons = document.querySelectorAll(".blog-back-button");
    if (buttons) {
        buttons.forEach((button) => {
            button.addEventListener("click", () => {
                handleClick();
            });
        });
    }

    function handleClick() {
        if (window.history.length > 1) {
            window.history.back();
        } else {
            window.location.href = "/posts/";
        }
    }
</script>

<style>
    .left-column {
        grid-column: 1;
        position: sticky;
        top: 2rem;
        height: fit-content;
    }
</style>
